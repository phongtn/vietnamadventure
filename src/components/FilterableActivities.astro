---
interface Activity {
  id: string;
  title: string;
  description: string;
  image: string;
  url: string;
  difficulty: 'Easy' | 'Moderate' | 'Hard';
  location: string;
  duration: string;
  category: string;
  tags: string[];
}

interface Props {
  activities: Activity[];
  categories?: string[];
  difficulties?: string[];
}

const { activities, categories = [], difficulties = ['Easy', 'Moderate', 'Hard'] } = Astro.props;

// If no categories provided, extract them from activities
const uniqueCategories = categories.length 
  ? categories 
  : [...new Set(activities.map(activity => activity.category))];

// Extract all unique tags
const allTags = [...new Set(activities.flatMap(activity => activity.tags))];
---

<div x-data="{
  activities: JSON.parse(decodeURIComponent('__ACTIVITIES__')),
  filteredActivities: [],
  selectedCategories: [],
  selectedDifficulties: [],
  selectedTags: [],
  searchQuery: '',
  
  init() {
    this.filteredActivities = this.activities;
  },
  
  applyFilters() {
    this.filteredActivities = this.activities.filter(activity => {
      // Category filter
      if (this.selectedCategories.length && !this.selectedCategories.includes(activity.category)) {
        return false;
      }
      
      // Difficulty filter
      if (this.selectedDifficulties.length && !this.selectedDifficulties.includes(activity.difficulty)) {
        return false;
      }
      
      // Tags filter
      if (this.selectedTags.length && !this.selectedTags.some(tag => activity.tags.includes(tag))) {
        return false;
      }
      
      // Search filter
      if (this.searchQuery) {
        const query = this.searchQuery.toLowerCase();
        return (
          activity.title.toLowerCase().includes(query) ||
          activity.description.toLowerCase().includes(query) ||
          activity.location.toLowerCase().includes(query)
        );
      }
      
      return true;
    });
  }
}" 
x-init="filteredActivities = activities"
x-effect="applyFilters()"
class="space-y-6"
>
  <div class="bg-cream p-6 rounded-lg">
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
      <!-- Search -->
      <div class="md:col-span-4">
        <div class="relative">
          <input 
            type="text" 
            x-model="searchQuery" 
            placeholder="Search activities..."
            class="w-full px-4 py-2 pr-10 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-forest focus:border-transparent"
          />
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="h-5 w-5 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            stroke-width="2" 
            stroke-linecap="round" 
            stroke-linejoin="round"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </div>
      </div>
      
      <!-- Categories -->
      <div>
        <h3 class="font-medium text-charcoal mb-2 font-inter">Categories</h3>
        <div class="space-y-1">
          {uniqueCategories.map(category => (
            <label class="flex items-center">
              <input 
                type="checkbox" 
                x-model="selectedCategories" 
                value={category} 
                class="rounded text-forest focus:ring-forest h-4 w-4"
              />
              <span class="ml-2 text-sm">{category}</span>
            </label>
          ))}
        </div>
      </div>
      
      <!-- Difficulty -->
      <div>
        <h3 class="font-medium text-charcoal mb-2 font-inter">Difficulty</h3>
        <div class="space-y-1">
          {difficulties.map(difficulty => (
            <label class="flex items-center">
              <input 
                type="checkbox" 
                x-model="selectedDifficulties" 
                value={difficulty} 
                class="rounded text-forest focus:ring-forest h-4 w-4"
              />
              <span class="ml-2 text-sm">{difficulty}</span>
            </label>
          ))}
        </div>
      </div>
      
      <!-- Tags -->
      <div class="md:col-span-2">
        <h3 class="font-medium text-charcoal mb-2 font-inter">Tags</h3>
        <div class="flex flex-wrap gap-2">
          {allTags.map(tag => (
            <button 
              type="button"
              x-bind:class="selectedTags.includes('{tag}') ? 'bg-forest text-white' : 'bg-white text-charcoal'"
              class="px-3 py-1 rounded-full text-xs border border-gray-300 hover:border-forest transition-colors"
              x-on:click="selectedTags.includes('{tag}') ? selectedTags = selectedTags.filter(t => t !== '{tag}') : selectedTags.push('{tag}')"
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    </div>
    
    <!-- Clear filters -->
    <div class="flex justify-end">
      <button 
        type="button"
        class="text-sm text-forest hover:text-sunset transition-colors"
        x-on:click="selectedCategories = []; selectedDifficulties = []; selectedTags = []; searchQuery = '';"
      >
        Clear all filters
      </button>
    </div>
  </div>
  
  <p x-show="filteredActivities.length === 0" class="text-center text-gray-500 py-8">
    No activities match your filters. Try changing your search criteria.
  </p>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <template x-for="activity in filteredActivities" :key="activity.id">
      <article class="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300">
        <a :href="activity.url" class="block overflow-hidden">
          <div class="h-48 overflow-hidden">
            <img 
              :src="activity.image" 
              :alt="activity.title" 
              class="w-full h-full object-cover hover:scale-105 transition-transform duration-500" 
              loading="lazy"
            />
          </div>
        </a>
        
        <div class="p-5">
          <span 
            x-text="activity.difficulty" 
            x-bind:class="{
              'bg-green-100 text-green-800': activity.difficulty === 'Easy',
              'bg-yellow-100 text-yellow-800': activity.difficulty === 'Moderate',
              'bg-red-100 text-red-800': activity.difficulty === 'Hard'
            }"
            class="inline-block px-3 py-1 rounded-full text-xs font-medium mb-2"
          ></span>
          
          <a :href="activity.url">
            <h3 x-text="activity.title" class="text-xl font-bold text-charcoal mb-2 hover:text-forest transition-colors font-inter"></h3>
          </a>
          
          <p x-text="activity.description" class="text-gray-600 mb-4 line-clamp-2"></p>
          
          <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <span x-text="activity.location"></span>
            </div>
            
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              <span x-text="activity.duration"></span>
            </div>
          </div>
        </div>
      </article>
    </template>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const component = document.querySelector('[x-data]');
    if (component) {
      const activitiesPlaceholder = '__ACTIVITIES__';
      const activitiesJson = JSON.stringify(ACTIVITIES_DATA);
      const content = component.outerHTML.replace(activitiesPlaceholder, encodeURIComponent(activitiesJson));
      component.outerHTML = content;
    }
  });
</script>
